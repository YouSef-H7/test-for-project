name: Infrastructure Management (Terraform)

on:
  push:
    branches:
      - main
    paths:
      - 'Terraform/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'Terraform/**'
  workflow_dispatch:

env:
  # Azure Resources
  RESOURCE_GROUP: error-team-rg2
  RESOURCE_GROUP_ALT: error-team-rg
  ACR_NAME: acrteam4
  AKS_CLUSTER_NAME: aks-cluster-team4
  
  # Terraform
  TF_VERSION: 1.6.6

jobs:
  #########################################################
  # TERRAFORM - Validate & Apply Infrastructure
  #########################################################
  terraform:
    name: üèóÔ∏è Terraform Validate & Apply
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./Terraform
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîç Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: üéØ Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

      - name: ‚úÖ Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: üß† Auto Import Existing Azure Resources
        id: auto_import
        run: |
          echo "üîç Checking and importing existing Azure resources..."
          echo "‚ÑπÔ∏è  Resources split across error-team-rg and error-team-rg2"
          
          # ACR (in error-team-rg)
          echo "üì¶ Checking ACR in error-team-rg..."
          if az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP_ALT }} &>/dev/null; then
            echo "‚úÖ Found ACR in error-team-rg, attempting import..."
            terraform import -no-color module.acr.azurerm_container_registry.acr "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_ALT }}/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }}" 2>&1 | tee /tmp/acr_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  ACR not found - will be created"
          fi
          
          # AKS (in error-team-rg2)
          echo "üì¶ Checking AKS in error-team-rg2..."
          if az aks show --name ${{ env.AKS_CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "‚úÖ Found AKS in error-team-rg2, attempting import..."
            terraform import -no-color module.aks.azurerm_kubernetes_cluster.aks "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ env.AKS_CLUSTER_NAME }}" 2>&1 | tee /tmp/aks_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  AKS not found - will be created"
          fi
          
          # Public IP (in error-team-rg)
          echo "üì¶ Checking Public IP in error-team-rg..."
          if az network public-ip show --name appgw-team4-pip --resource-group ${{ env.RESOURCE_GROUP_ALT }} &>/dev/null; then
            echo "‚úÖ Found Public IP in error-team-rg, attempting import..."
            terraform import -no-color module.app_gateway.azurerm_public_ip.appgw_pip "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_ALT }}/providers/Microsoft.Network/publicIPAddresses/appgw-team4-pip" 2>&1 | tee /tmp/pip_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  Public IP not found - will be created"
          fi
          
          # VNet (in error-team-rg2)
          echo "üì¶ Checking VNet in error-team-rg2..."
          if az network vnet show --name vnet-team4 --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "‚úÖ Found VNet in error-team-rg2, attempting import..."
            terraform import -no-color module.network.azurerm_virtual_network.vnet "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-team4" 2>&1 | tee /tmp/vnet_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  VNet not found - will be created"
          fi
          
          # AKS Subnet (in error-team-rg2)
          echo "üì¶ Checking AKS Subnet in error-team-rg2..."
          if az network vnet subnet show --name subnet-aks --vnet-name vnet-team4 --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "‚úÖ Found AKS Subnet in error-team-rg2, attempting import..."
            terraform import -no-color module.network.azurerm_subnet.aks_subnet "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-team4/subnets/subnet-aks" 2>&1 | tee /tmp/aks_subnet_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  AKS Subnet not found - will be created"
          fi
          
          # Application Gateway Subnet (in error-team-rg2)
          echo "üì¶ Checking App Gateway Subnet in error-team-rg2..."
          if az network vnet subnet show --name subnet-appgw --vnet-name vnet-team4 --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "‚úÖ Found App Gateway Subnet in error-team-rg2, attempting import..."
            terraform import -no-color module.network.azurerm_subnet.appgw_subnet "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-team4/subnets/subnet-appgw" 2>&1 | tee /tmp/appgw_subnet_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  App Gateway Subnet not found - will be created"
          fi
          
          # Application Gateway (in error-team-rg)
          echo "üì¶ Checking Application Gateway in error-team-rg..."
          if az network application-gateway show --name appgw-team4 --resource-group ${{ env.RESOURCE_GROUP_ALT }} &>/dev/null; then
            echo "‚úÖ Found Application Gateway in error-team-rg, attempting import..."
            terraform import -no-color module.app_gateway.azurerm_application_gateway.app_gateway "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_ALT }}/providers/Microsoft.Network/applicationGateways/appgw-team4" 2>&1 | tee /tmp/appgw_import.log || echo "‚ö†Ô∏è  Import failed or already imported"
          else
            echo "‚ÑπÔ∏è  Application Gateway not found - will be created"
          fi
          
          echo ""
          echo "‚úÖ Auto-import step completed!"
          echo "‚ÑπÔ∏è  Check logs above for any import errors"
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        continue-on-error: true

      - name: üìã Terraform Plan
        id: plan
        run: |
          terraform plan \
            -out=tfplan \
            -no-color
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        continue-on-error: false

      - name: üí¨ Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: üöÄ Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: |
          terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

      - name: üìä Terraform Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform output -no-color

      - name: üìù Infrastructure Summary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ INFRASTRUCTURE UPDATE COMPLETED"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "üì¶ Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "üê≥ ACR: ${{ env.ACR_NAME }}"
          echo "‚ò∏Ô∏è  AKS Cluster: ${{ env.AKS_CLUSTER_NAME }}"
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
