name: Infrastructure Management (Terraform)

on:
  push:
    branches:
      - main
    paths:
      - 'Terraform/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'Terraform/**'
  workflow_dispatch:

env:
  # Azure Resources
  RESOURCE_GROUP: error-team-rg2
  RESOURCE_GROUP_ALT: error-team-rg
  ACR_NAME: acrteam4
  AKS_CLUSTER_NAME: aks-cluster-team4
  
  # Terraform
  TF_VERSION: 1.6.6

jobs:
  #########################################################
  # TERRAFORM - Validate & Apply Infrastructure
  #########################################################
  terraform:
    name: 🏗️ Terraform Validate & Apply
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Add overall job timeout
    
    defaults:
      run:
        working-directory: ./Terraform
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔍 Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: 🎯 Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

      - name: ✅ Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: 🧠 Auto Import Existing Azure Resources
        id: auto_import
        timeout-minutes: 10
        run: |
          echo "🔍 Checking and importing existing Azure resources..."
          echo "ℹ️  Resources split across error-team-rg and error-team-rg2"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Helper function: Import with timeout and retry
          import_resource() {
            local RESOURCE_NAME="$1"
            local TF_ADDRESS="$2"
            local AZURE_ID="$3"
            local MAX_RETRIES=2
            local TIMEOUT=60
            
            echo ""
            echo "📦 Importing: $RESOURCE_NAME"
            echo "   Address: $TF_ADDRESS"
            
            for attempt in $(seq 1 $MAX_RETRIES); do
              echo "   Attempt $attempt/$MAX_RETRIES..."
              
              # Run import with proper error handling
              set +e
              timeout ${TIMEOUT}s terraform import -no-color -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" "$TF_ADDRESS" "$AZURE_ID" > /tmp/import_${RESOURCE_NAME}.log 2>&1
              EXIT_CODE=$?
              set -e
              
              # Check the result
              if [ $EXIT_CODE -eq 0 ]; then
                echo "   ✅ Successfully imported $RESOURCE_NAME"
                return 0
              elif [ $EXIT_CODE -eq 124 ]; then
                echo "   ⏰ Timeout after ${TIMEOUT}s"
              elif grep -qi "already managed\|Resource already managed by Terraform" /tmp/import_${RESOURCE_NAME}.log 2>/dev/null; then
                echo "   ℹ️  Already in Terraform state - OK"
                return 0
              else
                echo "   ⚠️  Import failed (exit: $EXIT_CODE)"
                tail -3 /tmp/import_${RESOURCE_NAME}.log 2>/dev/null | sed 's/^/      /'
              fi
              
              if [ $attempt -lt $MAX_RETRIES ]; then
                echo "   🔄 Retrying..."
                sleep 2
              fi
            done
            
            echo "   ❌ Failed to import $RESOURCE_NAME"
            return 1
          }
          
          # ACR (in error-team-rg)
          echo ""
          echo "� Checking ACR in error-team-rg..."
          if az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP_ALT }} &>/dev/null; then
            ACR_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_ALT }}/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }}"
            import_resource "ACR" "module.acr.azurerm_container_registry.acr" "$ACR_ID"
          else
            echo "   ℹ️  ACR not found - will be created"
          fi
          
          # VNet (in error-team-rg2)
          echo ""
          echo "� Checking VNet in error-team-rg2..."
          if az network vnet show --name vnet-team4 --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            VNET_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-team4"
            import_resource "VNet" "module.network.azurerm_virtual_network.vnet" "$VNET_ID"
          else
            echo "   ℹ️  VNet not found - will be created"
          fi
          
          # AKS Subnet (in error-team-rg2)
          echo ""
          echo "� Checking AKS Subnet in error-team-rg2..."
          if az network vnet subnet show --name subnet-aks --vnet-name vnet-team4 --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            AKS_SUBNET_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-team4/subnets/subnet-aks"
            import_resource "AKS_Subnet" "module.network.azurerm_subnet.aks_subnet" "$AKS_SUBNET_ID"
          else
            echo "   ℹ️  AKS Subnet not found - will be created"
          fi
          
          # Application Gateway Subnet (in error-team-rg2)
          echo ""
          echo "� Checking App Gateway Subnet in error-team-rg2..."
          if az network vnet subnet show --name subnet-appgw --vnet-name vnet-team4 --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            APPGW_SUBNET_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-team4/subnets/subnet-appgw"
            import_resource "AppGW_Subnet" "module.network.azurerm_subnet.appgw_subnet" "$APPGW_SUBNET_ID"
          else
            echo "   ℹ️  App Gateway Subnet not found - will be created"
          fi
          
          # Public IP (in error-team-rg)
          echo ""
          echo "� Checking Public IP in error-team-rg..."
          if az network public-ip show --name appgw-team4-pip --resource-group ${{ env.RESOURCE_GROUP_ALT }} &>/dev/null; then
            PIP_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_ALT }}/providers/Microsoft.Network/publicIPAddresses/appgw-team4-pip"
            import_resource "Public_IP" "module.app_gateway.azurerm_public_ip.appgw_pip" "$PIP_ID"
          else
            echo "   ℹ️  Public IP not found - will be created"
          fi
          
          # Application Gateway (in error-team-rg)
          echo ""
          echo "� Checking Application Gateway in error-team-rg..."
          if az network application-gateway show --name appgw-team4 --resource-group ${{ env.RESOURCE_GROUP_ALT }} &>/dev/null; then
            APPGW_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_ALT }}/providers/Microsoft.Network/applicationGateways/appgw-team4"
            import_resource "App_Gateway" "module.app_gateway.azurerm_application_gateway.appgw" "$APPGW_ID"
          else
            echo "   ℹ️  Application Gateway not found - will be created"
          fi
          
          # AKS (in error-team-rg2)
          echo ""
          echo "🔍 Checking AKS in error-team-rg2..."
          if az aks show --name ${{ env.AKS_CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            AKS_ID="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ env.AKS_CLUSTER_NAME }}"
            import_resource "AKS_Cluster" "module.aks.azurerm_kubernetes_cluster.aks" "$AKS_ID"
          else
            echo "   ℹ️  AKS not found - will be created"
          fi
          
          # Skip Role Assignments (they cause hangs and aren't critical for import)
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "ℹ️  Skipping role assignment imports (ACR Pull, AGIC roles)"
          echo "   These will be managed by Terraform during apply phase"
          echo ""
          echo "✅ Auto-import step completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        continue-on-error: true

      - name: 📋 Terraform Plan
        id: plan
        timeout-minutes: 15
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 Running Terraform Plan..."
          echo "ℹ️  This may take 5-10 minutes for large infrastructure"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          terraform plan \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -out=tfplan \
            -no-color \
            -input=false
          
          echo ""
          echo "✅ Terraform plan completed successfully!"
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        continue-on-error: false

      - name: 💬 Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: 🚀 Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        timeout-minutes: 30
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Applying Terraform changes..."
          echo "ℹ️  This may take 10-20 minutes for infrastructure changes"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          terraform apply -auto-approve tfplan
          
          echo ""
          echo "✅ Terraform apply completed successfully!"
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

      - name: 📊 Terraform Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform output -no-color

      - name: 📝 Infrastructure Summary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "═══════════════════════════════════════════════════"
          echo "✅ INFRASTRUCTURE UPDATE COMPLETED"
          echo "═══════════════════════════════════════════════════"
          echo ""
          echo "📦 Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "🐳 ACR: ${{ env.ACR_NAME }}"
          echo "☸️  AKS Cluster: ${{ env.AKS_CLUSTER_NAME }}"
          echo ""
          echo "═══════════════════════════════════════════════════"
